'''

Description:

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.



Example 2:

Input: s = "", t = "y"
Output: "y"



Example 3:

Input: s = "a", t = "aa"
Output: "a"



Example 4:

Input: s = "ae", t = "aea"
Output: "a"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lower-case English letters.

'''


from collections import Counter

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        
        # key: character
        # value: occurrence of character in s
        source_occ_dict = Counter(s)
        
        
        # scan each character in t
        for char in t:
            
            if char in source_occ_dict and source_occ_dict[char] > 0:
                
                # -1 for current occurrence
                source_occ_dict[char] -= 1
                
            else:
                
                # find the character of difference
                return char


# m : the character length of s
# n : the character length of t

## Time Complexity: O( m + n )
#
# The overhead in time is the cost of dinctionary building and for-loop iteration, which is of O( m + n )

## Space Complexity: O( m )
#
# The overhead in space is the storage for ditionary, which is of O( n )


import unittest

class Testing( unittest.TestCase ):

    def test_case_1( self ):

        result = Solution().findTheDifference( s = "abcd", t = "abcde" )
        self.assertEqual(result, 'e')


    def test_case_2( self ):

        result = Solution().findTheDifference( s = "", t = "y" )
        self.assertEqual(result, 'y')


    def test_case_3( self ):

        result = Solution().findTheDifference( s = "a", t = "aa" )
        self.assertEqual(result, 'a')


    def test_case_4( self ):

        result = Solution().findTheDifference( s = "ae", t = "aea" )
        self.assertEqual(result, 'a')


if __name__ == '__main__':

    unittest.main()        

